***** Account.cs *****
using System;

namespace BankingApplication.Entity
{
    public abstract class Account
    {
        private static long lastAccNo = 100000; // Static variable for unique account number generation

        public long AccountNumber { get; }
        public string AccountType { get; set; }
        public double Balance { get; set; }  // Add { set; } to make it modifiable

        public Customer AccountHolder { get; }

        protected Account(string accountType, double initialBalance, Customer accountHolder)
        {
            AccountNumber = GenerateAccountNumber();
            AccountType = accountType;
            Balance = initialBalance;
            AccountHolder = accountHolder;
        }

        private static long GenerateAccountNumber()
        {
            return ++lastAccNo;
        }

        public abstract void Withdraw(double amount);
        public abstract void Deposit(double amount);

        public override string ToString()
        {
            return $"Account No: {AccountNumber}, Type: {AccountType}, Balance: {Balance}, Holder: {AccountHolder.Name}";
        }
    }
}

***** CurrentAccount.cs *****
using BankingApplication.Exception;

namespace BankingApplication.Entity
{
    public class CurrentAccount : Account
    {
        public double OverdraftLimit { get; set; }

        public CurrentAccount(double initialBalance, Customer accountHolder, double overdraftLimit)
            : base("Current", initialBalance, accountHolder)
        {
            OverdraftLimit = overdraftLimit;
        }

        

public override void Withdraw(double amount)
    {
        if (Balance - amount < -OverdraftLimit)
            throw new OverDraftLimitExceededException("Overdraft limit exceeded! Cannot withdraw beyond the set limit.");
        Balance -= amount;
    }


    public override void Deposit(double amount)
        {
            Balance += amount;
        }
    }
}
***** Customer.cs *****
using System;

namespace BankingApplication.Entity
{
    public class Customer
    {
        private long phoneNumber;
        private string email;

        public long CustomerId { get; set; }
        public string Name { get; set; }
        public string Address { get; set; }
        public string PhoneNumber { get; set; }

        public Customer(long customerId, string name, string address, string phoneNumber)
        {
            CustomerId = customerId;
            Name = name;
            Address = address;
            PhoneNumber = phoneNumber;
        }

        public Customer(long phoneNumber, string name, string email)
        {
            this.phoneNumber = phoneNumber;
            Name = name;
            this.email = email;
        }

        public override string ToString()
        {
            return $"Customer ID: {CustomerId}, Name: {Name}, Address: {Address}, Phone: {PhoneNumber}";
        }
    }
}
***** SavingsAccount.cs *****
using BankingApplication.Exception;
namespace BankingApplication.Entity
{
    public class SavingsAccount : Account
    {
        private const double MinimumBalance = 500;
        public double InterestRate { get; set; }

        public SavingsAccount(double initialBalance, Customer accountHolder, double interestRate)
            : base("Savings", Math.Max(initialBalance, MinimumBalance), accountHolder)
        {
            InterestRate = interestRate;
        }

        

public override void Withdraw(double amount)
    {
        if (Balance - amount < MinimumBalance)
            throw new InsufficientFundException("Withdrawal denied! Savings account must maintain a minimum balance of 500.");
        Balance -= amount;
    }


    public override void Deposit(double amount)
        {
            Balance += amount;
        }
    }
}

***** ZeroBalanceAccount.cs *****
namespace BankingApplication.Entity
{
    public class ZeroBalanceAccount : Account
    {
        public ZeroBalanceAccount(Customer accountHolder)
            : base("ZeroBalance", 0, accountHolder)
        {
        }

        public override void Withdraw(double amount)
        {
            if (Balance < amount)
                throw new InvalidOperationException("Insufficient balance! Cannot withdraw more than available.");
            Balance -= amount;
        }

        public override void Deposit(double amount)
        {
            Balance += amount;
        }
    }
}
